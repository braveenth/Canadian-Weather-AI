# -*- coding: utf-8 -*-
"""Canadian_Weather_AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JeQzKKT1gS50xwtt3SKpHvuL6srnEw5p

#Canadian Weather AI
By: Braveenth Rasanayagam

Multi-modal
- Vision
- Text to Voice

Cloud Run Jobs
"""

image_url = "https://weather.gc.ca/data/jet_stream/tempmapwx_e.gif"
print(image_url)
# !curl -o case_image.png {image_url}

# from IPython.display import Image
# Image("/content/jet_stream.png")
# Image(url=image_url)

!pip install openai
from openai import OpenAI

#Config
# temperature = 1

try:
    # Attempt to import the google.colab module to see if the program is running in Colab.
    from google.colab import userdata
    print("Running on Google Colab")
    client = OpenAI(api_key=userdata.get('OPENAI_API_KEY'))

except ImportError:
    # The ImportError exception will be raised if the google.colab module is not found,
    # indicating that the program is not running inside Google Colab.
    import os
    print("Running outside of Google Colab")
    client = OpenAI(api_key=(os.environ.get('OPENAI_API_KEY')))

    # if 'TEMPERATURE' in os.environ:
    #     temperature = os.environ.get('TEMPERATURE')

canadianMetric = {}

canadianMetric[0] = "not Canadian"
canadianMetric[1] = "somewhat Canadian"
canadianMetric[2] = "slightly Canadian"
canadianMetric[3] = "moderately Canadian"
canadianMetric[4] = "very Canadian"
canadianMetric[5] = "as Canadian as possible"

gpt_mode = "gpt-4-vision-preview"
imagePrompt = "You are a Canadian weatherperson. Present this jet stream information to an audience. Make it sound very Canadian. It should sound as Canadian as absolutely possible."
image_url = "https://weather.gc.ca/data/jet_stream/tempmapwx_e.gif"

response = client.chat.completions.create(
  model="gpt-4-vision-preview",
  messages=[
    {
      "role": "user",
      "content": [
        {"type": "text", "text": imagePrompt},
        {
          "type": "image_url",
          "image_url": {
            "url": image_url,
          },
        },
      ],
    }
  ],
  max_tokens=600,
  #temperature=0.7,
  temperature=0.9,
  top_p=1,
  frequency_penalty=0,
  presence_penalty=0
)

#print(response.choices[0])

weatherScript = response.choices[0].message.content
#print(weatherScript)

# Save the weatherScript as a file
from datetime import datetime

date = datetime.now().strftime("%Y-%m-%d")
count = 0
while os.path.exists(f"/content/text/ai-canadian-jetstream-{date}_{count}.txt"):
    count += 1
file = open(f"/content/text/ai-canadian-jetstream-{date}_{count}.txt", "w")
file.write(weatherScript)
file.close()

from openai import OpenAI

try:
    # Attempt to import the google.colab module to see if the program is running in Colab.
    from google.colab import userdata
    print("Running on Google Colab")
    audioClient = OpenAI(api_key=userdata.get('OPENAI_API_KEY'))

except ImportError:
    # The ImportError exception will be raised if the google.colab module is not found,
    # indicating that the program is not running inside Google Colab.
    import os
    print("Running outside of Google Colab")
    audioClient = OpenAI(api_key=(os.environ.get('OPENAI_API_KEY')))

audioResponse = audioClient.audio.speech.create(
    model="tts-1",
    voice="onyx",
    input=weatherScript,
)

filename = greeting = f"weatherperson-output-{date}.mp3"

# Export the result
weatherPersonFileCount = 0
while os.path.exists(f"/content/weatherperson-output-{date}_{weatherPersonFileCount}.wav"):
    weatherPersonFileCount += 1

weatherpersonFile = f"/content/{filename}-{count}"
audioResponse.stream_to_file(f"/content/weatherperson-output-{date}_{weatherPersonFileCount}.wav")

!pip install pydub

from pydub import AudioSegment

# files = [f"output_{i}.mp3" for i in range(0, upper_limit)]


# Obtain Audio Files
audio_bg_music = AudioSegment.from_file("/content/assets/WeatherNetwork.mp3", format="mp3")
audio_weatherperson = AudioSegment.from_file(f"/content/weatherperson-output-{date}_{weatherPersonFileCount}.wav", format="mp3")

# Define start and end times in milliseconds
# Start at 17:22
# End at 17:3
start_time = 1042000  # Start at 10 seconds
end_time = start_time + 120000

# Slice the audio segment to the desired part
specific_part = audio_bg_music[start_time:end_time]

# Lower the volume by 10 dB
specific_part_quieter = specific_part - 5

# Overlay the audio files
# Here, overlay_audio will start at 0 milliseconds into base_audio
combined = specific_part_quieter.overlay(audio_weatherperson, position=0)

# Export the result
count = 0
while os.path.exists(f"/content/voice/ai-canadian-jetstream-{date}_{count}.mp3"):
    count += 1
combined.export(f"/content/voice/ai-canadian-jetstream-{date}_{count}.mp3", format="wav")

# # Initialize an empty audio segment
# combined = AudioSegment.empty()

# overlay = vln_audio_1.overlay(vla_audio_2)
# file_handle = overlay.export("output2.wav", format="wav")

# # Loop through the list and concatenate each file
# for file in files:
#     current_audio = AudioSegment.from_mp3(file)
#     combined += current_audio

# # Export the combined audio
# combined.export("/content/caseStory.mp3", format="wav")